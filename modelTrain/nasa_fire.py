# -*- coding: utf-8 -*-
"""nasa_fire

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hs3FZDzH9zY8QX4UPm0bLk9vgNpT-9wo
"""

from google.colab import drive
drive.mount('/content/drive')

import os

base_dir='/content/drive/My Drive/Python/nasa/fire_set/'

train_dir=os.path.join(base_dir, 'train')
validation_dir=os.path.join(base_dir, 'val')
test_dir=os.path.join(base_dir, 'test')

train_fire_dir=os.path.join(train_dir, 'fire')
train_nonfire_dir=os.path.join(train_dir,'nonfire')

validation_fire_dir=os.path.join(validation_dir,'fire')
validation_nonfire_dir=os.path.join(validation_dir,'nonfire')


test_fire_dir=os.path.join(test_dir,'fire')
test_nonfire_dir=os.path.join(test_dir,'nonfire')

from keras import optimizers
model.compile(loss='binary_crossentropy',
optimizer=optimizers.RMSprop(lr=1e-4),
metrics=['acc'])

from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
train_dir,
target_size=(224, 224),
batch_size=100,
class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
test_dir,
target_size=(224, 224),
batch_size=200,
class_mode='binary')

datagen = ImageDataGenerator(
        rotation_range=50,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        fill_mode='nearest')

from keras.preprocessing import image
import matplotlib.pyplot as plt


fnames = [os.path.join(train_fire_dir, fname) for fname in os.listdir(train_fire_dir)]

fnames[200:210]

# img_path = fnames[201]

# img = image.load_img(img_path, target_size=(224, 224))
# x=image.img_to_array(img)
# x=x.reshape((1,)+x.shape)

# i = 0

# #fig=plt.figure(figsize=(2, 2))

# for batch in datagen.flow(x, batch_size=1):
#   plt.figure(i)
  
#   #fig.add_subplot(2, 2, i+1)
#   plt.imshow(image.array_to_img(batch[0]))
#   i+=1
#   if i % 4 == 0:
#     break
# plt.show()

# history = model.fit_generator(
#   train_generator,
#   steps_per_epoch=30,
#   epochs=10,
#   validation_data=validation_generator,
#   validation_steps=50)

# #model.save('/content/drive/My Drive/Python/keras_st/firepredict_two.h5')

from keras.models import model_from_json

model_json = model.to_json()

model.save('/content/drive/My Drive/Python/nasa/firepredict_full_mini.h5')


with open("/content/drive/My Drive/Python/nasa/firepredict.json", "w") as json_file:
    json_file.write(model_json)

print("Saved model to disk")   

model.save_weights("/content/drive/My Drive/Python/nasa/weights.h5")

print("Svaed weights to disk")

from keras.applications import MobileNet

conv_base = MobileNet(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

img_fire='/content/drive/My Drive/Python/nasa/fire_set/train/'
x = image.img_to_array(img)

model = models.Sequential()
model.add(conv_base)
model.add(layers.Flatten())
model.add(layers.Dense(256, activation='relu'))
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy',
optimizer=optimizers.RMSprop(lr=2e-5),
metrics=['acc'])

model.summary()

conv_base.trainable=False
conv_base.trainable

model.compile(loss='binary_crossentropy',
optimizer=optimizers.RMSprop(lr=1e-4),
metrics=['acc'])

history = model.fit_generator(
  train_generator,
  steps_per_epoch=20,
  epochs=5,
  validation_data=validation_generator,
  validation_steps=10)

#model.save('/content/drive/My Drive/Python/keras_st/firepredict_three.h5')

model.save_weights("/content/drive/My Drive/Python/nasa/mobile_weights.h5")

from keras.models import model_from_json

model_json = model.to_json()

model.save('/content/drive/My Drive/Python/nasa/firepredict.h5')


with open("/content/drive/My Drive/Python/nasa/firepredict.json", "w") as json_file:
    json_file.write(model_json)

print("Saved model to disk")   

model.save_weights("/content/drive/My Drive/Python/nasa/mobile_wig.h5")

print("Svaed weights to disk")